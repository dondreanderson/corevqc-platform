generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  description String?
  logoUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]
  users       User[]

  @@map("organizations")
}

model User {
  id                 String            @id @default(cuid())
  email              String?           @unique
  firstName          String?
  lastName           String?
  password           String?
  role               UserRole          @default(USER)
  isActive           Boolean           @default(true)
  lastLoginAt        DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  organizationId     String?
  inspections        Inspection[]
  itps               ITP[]
  ncrs               NCR[]
  documentsUploaded  ProjectDocument[]
  projectMemberships ProjectMember[]
  projectsOwned      Project[]         @relation("ProjectOwner")
  organization       Organization?     @relation(fields: [organizationId], references: [id])

  @@map("users")
}

model Project {
  id             String            @id @default(cuid())
  name           String
  description    String?
  status         ProjectStatus     @default(PLANNING)
  priority       ProjectPriority   @default(MEDIUM)
  progress       Int               @default(0)
  budget         Decimal?
  clientName     String?
  clientContact  String?
  projectType    String?
  startDate      DateTime?
  endDate        DateTime?
  location       String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  organizationId String?
  ownerId        String?
  inspections    Inspection[]
  itps           ITP[]
  ncrs           NCR[]
  documents      ProjectDocument[]
  members        ProjectMember[]
  organization   Organization?     @relation(fields: [organizationId], references: [id])
  owner          User?             @relation("ProjectOwner", fields: [ownerId], references: [id])

  @@map("projects")
}

model ITP {
  id             String          @id @default(cuid())
  itpNumber      String          @unique
  title          String
  description    String?
  phase          String
  activity       String
  status         ITPStatus       @default(PENDING)
  inspectionType InspectionType  @default(VISUAL)
  scheduledAt    DateTime?
  completedAt    DateTime?
  location       String?
  notes          String?
  requirements   String[]        @default([])
  holdPoints     String[]        @default([])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  projectId      String
  inspectorId    String
  checkpoints    ITPCheckpoint[]
  inspector      User            @relation(fields: [inspectorId], references: [id])
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  photos         Photo[]

  @@map("itps")
}

model ITPCheckpoint {
  id          String           @id @default(cuid())
  description String
  status      CheckpointStatus @default(PENDING)
  checkedBy   String?
  checkedAt   DateTime?
  notes       String?
  order       Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  itpId       String
  itp         ITP              @relation(fields: [itpId], references: [id], onDelete: Cascade)

  @@map("itp_checkpoints")
}

model NCR {
  id               String      @id @default(cuid())
  ncrNumber        String      @unique
  title            String
  description      String
  severity         NCRSeverity @default(MEDIUM)
  status           NCRStatus   @default(OPEN)
  category         String
  location         String?
  correctiveAction String?
  rootCause        String?
  dueDate          DateTime?
  closedAt         DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  projectId        String
  reportedById     String
  project          Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reportedBy       User        @relation(fields: [reportedById], references: [id])
  photos           Photo[]

  @@map("ncrs")
}

model Inspection {
  id          String           @id @default(cuid())
  title       String
  description String?
  status      InspectionStatus @default(PENDING)
  scheduledAt DateTime?
  completedAt DateTime?
  location    String?
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  projectId   String
  inspectorId String
  inspector   User             @relation(fields: [inspectorId], references: [id])
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  photos      Photo[]

  @@map("inspections")
}

model Photo {
  id           String      @id @default(cuid())
  filename     String
  originalName String
  url          String
  caption      String?
  createdAt    DateTime    @default(now())
  inspectionId String?
  ncrId        String?
  itpId        String?
  inspection   Inspection? @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  itp          ITP?        @relation(fields: [itpId], references: [id], onDelete: Cascade)
  ncr          NCR?        @relation(fields: [ncrId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  projectId String
  userId    String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectDocument {
  id           String       @id @default(cuid())
  name         String
  filePath     String
  fileSize     Int?
  fileType     String?
  documentType DocumentType @default(OTHER)
  uploadedAt   DateTime     @default(now())
  projectId    String
  uploadedById String
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy   User         @relation(fields: [uploadedById], references: [id])

  @@map("project_documents")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectRole {
  MANAGER
  SUPERVISOR
  INSPECTOR
  MEMBER
}

enum ITPStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

enum CheckpointStatus {
  PENDING
  PASSED
  FAILED
}

enum InspectionType {
  VISUAL
  DIMENSIONAL
  MATERIAL_TEST
  PERFORMANCE
  SAFETY
}

enum InspectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum NCRSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NCRStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum DocumentType {
  DRAWING
  SPECIFICATION
  CONTRACT
  PHOTO
  REPORT
  PLAN
  PERMIT
  OTHER
}